:mod:`autonomy_toolkit.containers.container_client`
===================================================

.. py:module:: autonomy_toolkit.containers.container_client

.. autoapi-nested-parse::

   Base class that container runtimes will inherit from to be used by ATK commands.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   autonomy_toolkit.containers.container_client.ContainerClient



.. py:exception:: ContainerException(message: Any, stdout: str = None, stderr: str = None)

   Bases: :class:`Exception`

   Exception class that is used by the :class:`ContainerClient` when an error occurs

   :Parameters: * **message** (*Any*) -- The message to be stored in the base class Exception
                * **stdout** (*str*) -- The stdout from the command
                * **stderr** (*str*) -- The stderr from the command


.. py:class:: ContainerClient(config: ATKConfig, project=None, compose_file='.atk-compose.yml', **kwargs)

   Bases: :class:`abc.ABC`

   Base class that provides an entrypoint for specific container runtimes (i.e. Docker or Singularity).

   :Parameters: * **config** (*ATKConfig*) -- The config definition
                * **project** (*str*) -- The name of the project to use. Analagous with ``--project-name`` in ``docker compose``.
                * **compose_file** (*str*) -- The name of the compose file to use. Defaults to ``.atk-compose.yml``.

   .. method:: is_installed() -> bool
      :staticmethod:
      :abstractmethod:

      Should check if all the necessary packages/binaries are installed and return True, if yes.

      :returns: *bool* -- True if everything is installed/setup properly.


   .. method:: down(self, *args) -> bool

      Bring down the containers.

      :returns: *bool* -- Whether the command succeeded.


   .. method:: build(self, *args) -> bool

      Build the images.

      :returns: *bool* -- Whether the command succeeded.


   .. method:: up(self, *args) -> bool

      Bring up the containers.

      :returns: *bool* -- Whether the command succeeded.


   .. method:: run(self, *args) -> bool

      Run a command in a container.

      :returns: *bool* -- Whether the command succeeded.


   .. method:: shell(self, service: str, container: str, *args, exec_flags=None) -> bool

      Enter the shell for a specific container.

      Will check for the USERSHELLPATH and USERSHELLPROFILE environment variable in the container (where the latter isn't required).

      :Parameters: * **service** (*str*) -- The service to enter
                   * **container** (*str*) -- The container to enter


   .. method:: run_cmd(self, cmd, *args, **kwargs) -> 'Tuple[str, str]'

      Run a command using the system wide ``compose`` command

      If cmd is equal to ``exec``, ``exec_cmd`` will expect to be passed as a named argument.
      If not, a :class:`ContainerException` will be thrown.

      Additional positional args (``*args``) will be passed as command arguments when running the command.
      Named arguments will be passed to :meth:`subprocess.run`
      (`see their docs <https://docs.python.org/3/library/subprocess.html#subprocess.run>`_).

      :Parameters: **cmd** (*str*) -- The command to run.

      :returns: *Tuple[str, str]* -- The stdout and stderr resulting from the command as a tuple.



