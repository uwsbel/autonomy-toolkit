:mod:`autonomy_toolkit.utils.atk_config`
========================================

.. py:module:: autonomy_toolkit.utils.atk_config

.. autoapi-nested-parse::

   Abstracted helper class :class:`ATKConfig` used for reading/writing configuration files for ``autonomy-toolkit``.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   autonomy_toolkit.utils.atk_config.ATKConfig



.. py:class:: ATKConfig(filename: Union[Path, str] = '.atk.yml', container_runtime: str = 'docker')

   Helper class that abstracts reading the ``.atk.yml`` file that defines configurations

   .. method:: add_required_attribute(self, *args)

      Add a required attribute that must be present in the ``autonomy-toolkit`` YAML specification.

      Will be checked for existence when :meth:`parse` is called.

      :Parameters: **\*args** -- The nested path of the required attribute, i.e. ``add_required_attribute("first_level", "second_level")`` corresponds to ``first_level: second_level: ...``.


   .. method:: add_custom_attribute(self, *path: 'List[str]', type: type, default: Any = None, dest: str = None, delete: bool = True)

      Add a custom attribute to the ``autonomy-toolkit`` YAML specification.

      A custom attribute is any root-level attribute that's outside of the regular ``docker compose``
      YAML specification. After being read, it will be deleted from the written ``docker compose`` generated
      config file.

      The first argument should be a list of nested keys. For instance, if a custom attribute
      should be structured like the following example, then ``add_custom_attribute("project", ...)``
      and ``add_custom_attribute("user", "name", ...)`` should be called.

      .. code-block:: yaml

          project: example
          user:
              name: example

      :attr:`type` should then be a type that describes the expected type of the variable. This is a required type.
      If the parsed type is not the same as this, an error will be thrown.

      ``default`` is the final argument. If it is unset (i.e. remains ``None``), the attribute will be assumed to be required.
      If set, when parsing, the value will be updated to be ``default`` if it is not set in the ATK config file.

      ``dest`` is the destination name for the variable that's generated from the custom attribute. By default,
      if ``dest`` is ``None``, the last path element in ``args`` will be used. For instance,
      provided the yaml config above, if ``dest`` isn't provided for the ``user: name`` attribute, it will be
      set to ``'name'``.

      :Parameters: * **path** (*List[str]*) -- The nested argument list (see docs).
                   * **type** (*type*) -- Represents the type of the attribute.
                   * **default** (*Any*) -- The default value to set to the attribute when parsing.
                   * **dest** (*str*) -- The destination name for the variable that's generated.
                   * **delete** (*bool*) -- If False, the attribute will `not` be removed from the config file after parsing. Defaults to True.


   .. method:: add_attribute_translation_rule(self, *path: 'List[str]', rule: Tuple[str, str])

      Add a translation rule to the ``autonomy-toolkit`` YAML specification.

      Translate rules are meant to aid in making the atk useable by different container runtimes.
      As an example, singularity-compose uses "instances" whereas docker composes "services". In this instance
      a translation such as the following would be added.

      .. code-block:: python

          config = ATKConfig()
          config.add_attribute_translation_rule(rule=("services", "instances"))

      The above rule will then find "services" at the root of the yaml config and replace it
      with "instances".

      .. code-block: python

          config = ATKConfig()
          config.add_attribute_translation_rule("services", "dev", rule=("before", "after"))

      This example will walk up to "services->dev" and replace "before" with "after".

      .. note::

          The translation rules are used only when the ATK config file is written.
          Otherwise, analagous compose terms should be refered to as they are in the ``docker compose`` docs.

      :Parameters: * **path** (*List[str]*) -- The nested argument list (see docs).
                   * **rule** (*Tuple[str, str]*) -- translation rule (from, to) such that all "from"'s are translated to "to"'s.


   .. method:: parse(self) -> bool

      Parse the ATK config file.

      Will read in the ATK config file as a yaml file. Utilizes the :class:`ATKYamlFile` class as the parser.

      The parser will walk through each custom attribute defined prior to :meth:`func` being called and
      evaluate the attribute. Checks will be made to verify the types are correct, and if required attributes
      are defined. If a required attribute is not defined, an error will be thrown and parsing will stop. If an
      attribute has a wrong type, an error will be thrown and parsing will stop.

      :returns: *bool* -- whether the file was successfully parsed


   .. method:: generate_compose(self, services: List[str] = [], overwrite_lists: bool = False, use_default_compose: bool = True)

      Generates a ``atk-compose.yml`` specification file that's used by ``docker compose``

      This method will grab the defaults that are shipped with ``autonomy-toolkit`` and merge them with
      the custom configurations provided through the custom yaml config file.

      The file will `not` be written. See :meth:`write_compose`.

      :Parameters: * **services** (*List[str]*) -- List of services to maintain in the compose file. If none are passed, all are kept.
                   * **overwrite_lists** (*bool*) -- If true, all lists in the default that conflict with lists in the custom config will be overwritten. If false, the lists will be extended.
                   * **use_default_compose** (*bool*) -- If false, will not combine the ATK config with the defaults. Defaults to True.


   .. method:: write_compose(self, compose: dict = None)

      Writes the ``docker compose`` config file.

      If ``compose`` is not None, the ``docker compose`` config file will be overwritten
      with a custom dictionary which is parsed as yaml.

      :Parameters: **compose** (*dict*) -- The dictionary to parse as yaml to be used to overwrite the compose file. Defaults to None (unused).


   .. method:: generate_dockerignore(self)

      Generates a ``.dockerignore`` file that's used by ``docker``


   .. method:: update_user_count(self, val: int)

      Update the user count file to keep track of how many instances of the ATK
      container system has been initialized.

      An early issue with the ``autonomy-toolkit`` package was that if there were
      two instances of a container running, when one would exit, the clean-up process
      would take place (i.e. docker compose file would be deleted, etc.), but this wasn't
      desired. The user count was introduced to alleviate this issue, where the number of containers
      are kept track of. Only when there are zero current "users" will cleanup take place.

      This is implemented through a file that's constantly updated as new users are added/removed.

      .. warning::

          This doesnt' work.

      :Parameters: **val** (*int*) -- Either 1 or -1 for an added and removed user, respectively.

      :returns: *int* -- The number of current members (including the changes introduced by this method call)


   .. method:: cleanup(self, keep_compose: bool = False)

      Cleanup the system.

      Cleanup consists of deleting the ``docker compose`` config and ignore files, as well as
      the ``autonomy-toolkit`` user count file

      :Parameters: **keep_compose** (*bool*) -- If true, will `not` delete the ``docker compose`` config file. Otherwise, it will be deleted.



