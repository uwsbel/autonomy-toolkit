:mod:`autonomy_toolkit.utils.parsing`
=====================================

.. py:module:: autonomy_toolkit.utils.parsing

.. autoapi-nested-parse::

   Helper methods/classes for parsing files.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   autonomy_toolkit.utils.parsing.ATKFile
   autonomy_toolkit.utils.parsing.ATKJsonFile
   autonomy_toolkit.utils.parsing.ATKYamlFile
   autonomy_toolkit.utils.parsing.ATKTextFile



Functions
~~~~~~~~~

.. autoapisummary::

   autonomy_toolkit.utils.parsing.replace_vars_in_file
   autonomy_toolkit.utils.parsing.replace_vars


.. function:: replace_vars_in_file(file: ATKFile, vars_dict: dict)

   Performs bash-like substitution in the passed file.

   See :meth:`replace_vars` for further information on implementation.

   :Parameters: * **file** (*ATKFile*) -- The file to do variable replacement for
                * **vars_dict** (*dict*) -- The variable mapping to do the replacement


.. function:: replace_vars(value: Union[Dict,Str,Iterable], vars_dict: dict) -> 'Union[Dict,Str,Iterable]'

   bash-like substitution for variables in the yaml file

   Will replace all variables with the following specification with variables in the ``vars_dict`` parameter.
   Code adapted from `podman compose <https://github.com/containers/podman-compose/blob/701311aa7a278eaa8b3a67d5928ee3531b60a9d7/podman_compose.py#L194>`_.

   This method functions similarly to docker and docker compose support subset of bash variable substitution,
   as defined `by variable substitution <https://docs.docker.com/compose/compose-file/#variable-substitution>`_, `env file <https://docs.docker.com/compose/env-file/>`_, and
   `shell parameter expansion <https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html>`_. In docker/docker compose, variable substitution is defined
   through a variety of means, all which use $ as the identifier. To not cause any conflicts, @ is used instead for ``autonomy-toolkit``.

   The following attributes may be used:

   - ``@VARIABLE``: Simple variable replacement

   - ``@{VARIABLE}``: Simple variable replacement

   - ``@{VARIABLE:-default}``: default if not set or empty

   - ``@{VARIABLE-default}``: default if not set

   - ``@{VARIABLE:?err}``: raise error if not set or empty

   - ``@{VARIABLE?err}``: raise error if not set

   - ``@@``: escape that means @

   :Parameters: * **value** (*Union[Dict,Str,Iterable]*) -- The value to do variable placement on
                * **vars_dict** (*dict*) -- The dictionary holding the variable mapping for replacement

   :returns: *Union[Dict,Str,Iterable]* -- Value with replacements


.. py:class:: ATKFile(type: str)

   Bases: :class:`abc.ABC`

   Base class that defines a file.

   Derived classes should inherit from :class:`ATKFile` and should represent a specific file type (such as
   YAML, JSON, etc.). They `must` utilize the ``self._data`` attribute to maintain it's internal data structure.

   :Parameters: **type** (*str*) -- The type of file this represents as string (i.e. 'yaml', 'json', etc.). Used for logging.

   .. method:: replace_vars(self, vars_dict: dict)

      Performs bash-like substitution in the passed file.

      See :meth:`replace_vars` for further information on implementation.

      :Parameters: **vars_dict** (*dict*) -- The variable mapping to do the replacement


   .. method:: data(self) -> 'Any'
      :property:

      Get the data stored by this file

      :returns: *Any* -- the file's data


   .. method:: __str__(self) -> str
      :abstractmethod:

      Should implement some functionality to convert the underlying data to a string.


   .. method:: write(self, output: str) -> bool

      Write this file to some output location.

      :Parameters: **output** (*str*) -- The output file to write to

      :returns: *bool* -- whether the operation was successful


   .. method:: read(self, filename: str) -> str

      Read in the passed file and return it as a string.

      :Parameters: **filename** (*str*) -- the file to read

      :returns: *str* -- the file's contents as a string



.. py:class:: ATKJsonFile(filename: str = None, text: str = None)

   Bases: :class:`autonomy_toolkit.utils.parsing._ATKDictWrapperFile`

   A class to aid in parsing json configuration files

   The JsonParser can take in `either` a ``filename`` or a ``text`` parameter. If ``filename`` is passed,
   a file will be read and parsed using the json specification. If ``text`` is passed, the text will be
   read and parsed using the json specification.

   :Parameters: * **filename** (*str*) -- the filename of the path to read
                * **text** (*str*) -- the text to parse

   .. method:: __str__(self)

      Should implement some functionality to convert the underlying data to a string.



.. py:class:: ATKYamlFile(filename: str = None, text: str = None)

   Bases: :class:`autonomy_toolkit.utils.parsing._ATKDictWrapperFile`

   A class to aid in parsing yaml configuration files

   Yaml files are human readable configuration files: https://yaml.org/.

   The YamlParser can take in `either` a ``filename`` or a ``text`` parameter. If ``filename`` is passed,
   a file will be read and parsed using the yaml specification. If ``text`` is passed, the text will be
   read and parsed using the yaml specification.

   :Parameters: * **filename** (*str*) -- the filename of the path to read
                * **text** (*str*) -- the text to parse

   .. method:: contains(self, *args) -> bool

      Checks whether the yaml file contains a certain nested attribute

      Ex:

          .. code-block:: YAML

              # test.yml
              test:
                  one: red
                  two: blue
                  three: green

          .. code-block:: Python

              >> parser = YAMLParser('test.yml')
              >> parser.contains('test', 'one')
              True
              >> parser.contains('test', 'four')
              False
              >> parser.contains('test', 'one', 'red')
              False

      :Parameters: **\*args** -- A list of arguments to search in the file

      :returns: *bool* -- Whether the nested attributes are contained in the file


   .. method:: get(self, *args, default=None, throw_error=True) -> 'Any'

      Grabs the attribute at the nested location provided by args

      Ex:
          .. code-block:: YAML

              # test.yml
              test:
                  one: red
                  two: blue
                  three: green

          .. code-block:: Python

              >> parser = YAMLParser('test.yml')
              >> parser.get('test', 'one')
              red
              >> parser.get('test', 'green', 'test')
              test
              >> parser.get('test', 'green')             // raises AttributeError

      :Parameters: * **\*args** -- A list of arguments to search in the file
                   * **default** (*Any*) -- The default value if the nested attribute isn't found
                   * **throw_error** (*bool*) -- Throw an error if default is None and the attribute isn't found. Defaults to True.

      :returns: *Any* -- The value at the nested attributes

      :raises AttributeError: If the nested attributes don't actually point to a value (i.e. contains(args) == False)


   .. method:: set(self, *args, value: Any, update_key: bool = False, throw_error: bool = True)

      Sets the attribute at the nested location provided by args

      Ex:
          .. code-block:: YAML

              # test.yml
              test:
                  one: red
                  two: blue
                  three: green

          .. code-block:: Python

              >> parser = YAMLParser('test.yml')
              >> parser.set('test', 'one', value='black')
              >> parser.set('test', 'three', value='twenty', update_key=True)
              >> print(yaml.dump(parser.data))
              test:
                  one: black
                  two: blue
                  twenty: green

      :Parameters: * **\*args** -- A list of arguments to search in the file
                   * **value** (*Any*) -- The value to set the found attribute to
                   * **update_key** (*bool*) -- Updates the key rather than the value if True. Defaults to False.
                   * **throw_error** (*bool*) -- Throw an error if the attribute isn't found. Defaults to True.

      :raises AttributeError: If the nested attributes don't actually point to a value (i.e. contains(args) == False)


   .. method:: __str__(self)

      Should implement some functionality to convert the underlying data to a string.



.. py:class:: ATKTextFile(filename: str, create: bool = False)

   Bases: :class:`autonomy_toolkit.utils.parsing.ATKFile`

   Wrapper class around a simple text file.

   :Parameters: * **filename** (*str*) -- the filename of the path to read
                * **create** (*bool*) -- if true, will create filename

   .. method:: __str__(self)

      Should implement some functionality to convert the underlying data to a string.



